
'''
    yield关键字使用在生成器函数中
        1.yidle和函数中的return有点像
        2.共同点：执行到这个关键字后会把结果返回
        3.不同的：
                1.return 会把结果返回，并结束当前函数的调用
                2.yield 会把结果返回，并记住当前代码执行的位置，下一次调用时会从上一次离开的位置继续向下执行
'''


# 使用yield定义一个生成器函数
def hello():
    print('hello 1')
    yield 1
    print('hello 2')
    yield 2
    print('haha 3')
    yield 3

#调用生成器函数，返回一个迭代器
res = hello()
r = next(res)
print(r)
r = next(res)
print(r)

# 使用list类似的函数去调用生成器返回的迭代器时，会把迭代器的返回结果，作为容器的元素
print(list(res))

#for循环

'''
    上面生成器函数调用时的过程：
        首先调用生成器函数，返回来一个迭代器
        1，第一次调用迭代器：
            走到当前的生成器函数中，遇到yield 1，把1返回，并且记住当前的执行状态（位置），暂停了执行，等待下一次的调用
        2. 第二次调用迭代器：
            从上一次遇到的yield位置开始执行，遇到了yield 2，把2返回，并记住状态，暂停执行，等待下一次调用
        2. 第三次调用迭代器：
            从上一次遇到的yield位置开始执行，遇到了yield 3，把3返回，并记住状态，暂停执行，等待下一次调用
        如果在最后又调用了迭代器，那么会从上一次yield位置开始，结果后面没有了，直接就超出范围，报错
'''